name: MSBuild

on: [push]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

jobs:
  build:
    runs-on: windows-2022

    steps:
    - uses: actions/checkout@v2

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1
      with:
        vs-prerelease: true
        
    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build Library
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}
      
    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: build-result
        path: |
          ./BUILD/
    # Runs code analysis with C/C++test.
    - name: Run C/C++test
      uses: parasoft/run-cpptest-action@1.0.1
      with:
        input: build/compile_commands.json
        testConfig: 'builtin://MISRA C 2012'
        compilerConfig: 'clang_10_0'
        
    # Uploads analysis results in the SARIF format, so that they are displayed as GitHub code scanning alerts.
    - name: Upload results (SARIF)
      if: always()
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: reports/report.sarif
        
    # Uploads an archive that includes all report files (.xml, .html, .sarif).
    - name: Archive reports
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: CpptestReports
        path: reports/*.*
